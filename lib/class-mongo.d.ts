// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../atma-utils
//   ../mongodb
//   ../class-json/ModelInfo

declare module 'class-mongo' {
    export { MongoEntity } from 'class-mongo/MongoEntity';
    export { MongoIndexes } from 'class-mongo/MongoIndexes';
    export { MongoSettings } from 'class-mongo/mongo/Settings';
    export { MongoUtils } from 'class-mongo/MongoUtils';
    export { MongoMeta } from 'class-mongo/MongoMeta';
    export { table, index } from 'class-mongo/decos';
}

declare module 'class-mongo/MongoEntity' {
    import { Statics } from 'atma-utils'; 
     import { FilterQuery, UpdateQuery, Collection, Db } from 'mongodb';
    export class MongoEntity {
            _id: string;
            static fetch<T extends typeof MongoEntity>(this: T, query: FilterQuery<T>): Promise<InstanceType<T>>;
            static fetchMany<T extends typeof MongoEntity>(this: T, query?: FilterQuery<T>, options?: any): Promise<InstanceType<T>[]>;
            static count<T extends typeof MongoEntity>(query?: FilterQuery<T>): Promise<any>;
            static upsert<T extends MongoEntity>(instance: T): Promise<T>;
            static upsertMany<T extends MongoEntity>(arr: T[]): Promise<T[]>;
            static del<T extends MongoEntity>(x: T): Promise<any>;
            static delMany<T extends MongoEntity>(arr: T[]): Promise<any>;
            static patch<T extends MongoEntity>(instance: T, patch: any): Promise<T>;
            static getCollection(): Promise<Collection>;
            static getDb(): Promise<Db>;
            upsert(): Promise<this>;
            del(): Promise<any>;
            patch<T extends MongoEntity>(this: T, patch: UpdateQuery<T>): Promise<T>;
    }
    export interface IEntity {
            _id: string;
    }
    export type Constructor<T = {}> = {
            new (...args: any[]): T;
    };
    export function MongoEntityFor<T>(Base: Constructor<T>): Statics<Constructor<T>> & Statics<typeof MongoEntity> & (new (...args: any[]) => T & MongoEntity);
}

declare module 'class-mongo/MongoIndexes' {
    export namespace MongoIndexes {
        function ensureAll(): Promise<any>;
    }
}

declare module 'class-mongo/mongo/Settings' {
    export interface IMongoSettings {
        db: string;
        ip?: string;
        port?: number;
        connection?: string;
        params?: any;
    }
    export namespace MongoSettings {
        function define(setts: IMongoSettings): void;
    }
    export function defineSettings(setts: IMongoSettings): void;
    export function getConnectionString(): string;
    export function getParams(): {
        auto_reconnect: boolean;
        native_parser: boolean;
        useUnifiedTopology: boolean;
        w: number;
    };
}

declare module 'class-mongo/MongoUtils' {
    export namespace MongoUtils {
        function toObjectID(id: string): any;
    }
}

declare module 'class-mongo/MongoMeta' {
    import { ModelInfo } from 'class-json/ModelInfo'; 
     /// <reference types="class-json" />
    import { IndexRaw } from 'class-mongo/mongo/Driver';
    export interface IMongoMeta {
            collection: string;
            indexes: IndexRaw[];
    }
    export namespace MongoMeta {
            function pickModelMeta(mix: Function | Object): ModelInfo<any> & IMongoMeta;
            function resolveModelMeta(mix: Function | Object): ModelInfo<any> & IMongoMeta;
            function getCollection(mix: Function | Object): string;
    }
}

declare module 'class-mongo/decos' {
    import { IndexOptions, IndexRaw } from 'class-mongo/mongo/Driver';
    export function table(name: string): (target: any) => any;
    export function index(index: IndexRaw): any;
    export function index(opts?: IndexOptions): any;
    export function index(name: string, opts?: IndexOptions): any;
    export function index(name: string, type: string | number, opts?: IndexOptions): any;
}

declare module 'class-mongo/mongo/Driver' {
    import { ICallback } from 'class-mongo/ICallback';
    import MongoLib = require('mongodb');
    export type IndexSpecification<T> = string | string[] | Record<keyof T, number>;
    export interface IndexOptions {
        unique?: boolean;
        [key: string]: any;
    }
    export interface IndexRaw {
        key: {
            [property: string]: string | number;
        };
        name?: string;
        unique?: boolean;
        [key: string]: any;
    }
    export { core_profiler_getData as db_profiler_getData } from 'class-mongo/mongo/DriverProfiler';
    export { core_profiler_toggle as db_profiler_toggle } from 'class-mongo/mongo/DriverProfiler';
    export function db_getCollection(name: any, cb: ICallback<MongoLib.Collection>): void;
    export function db_resolveCollection(name: any): Promise<any>;
    export function db_getDb(callback: ICallback<MongoLib.Db>): void;
    export function db_resolveDb(): Promise<any>;
    export function db_findSingle<T = any>(coll: string, query: MongoLib.FilterQuery<T>, callback: ICallback<T>): void;
    export function db_findMany<T = any>(coll: string, query: MongoLib.FilterQuery<T>, options: MongoLib.FindOneOptions, callback: ICallback<T[]>): void;
    export function db_count<T = any>(coll: string, query: MongoLib.FilterQuery<T>, callback: ICallback<number>): void;
    export function db_insert(coll: any, data: any, callback: any): void;
    export function db_insertSingle(coll: string, data: any, callback: any): void;
    export function db_insertMany(coll: any, data: any, callback: any): void;
    export function db_updateSingle<T extends {
        _id: any;
    }>(coll: string, data: T, callback: any): void;
    export function db_updateMany<T extends {
        _id: any;
    }>(coll: string, array: T[], callback: any): void;
    export function db_patchSingle(coll: any, id: any, patch: any, callback: any): void;
    export function db_remove(coll: any, query: any, isSingle: any, callback: any): void;
    export function db_ensureIndexes(collection: string, indexes: IndexRaw[], callback: any): void;
    export function db_ensureObjectID(value: any): any;
    export function db_getMongo(): typeof MongoLib;
}

declare module 'class-mongo/ICallback' {
    export interface ICallback<T> {
        (error: Error | string, result?: T): void;
    }
}

declare module 'class-mongo/mongo/DriverProfiler' {
    export interface IQueryInfo {
        coll: string;
        query: any;
        plan: any;
        params: any;
    }
    export interface IProfilerSettings {
        slow?: number;
        onDetect?: (info: IQueryInfo) => void;
        detector?: (plan: any, coll: any, query: any) => boolean;
    }
    export function core_profiler_getData(): {
        count: number;
        slow: IQueryInfo[];
        errors: Error[];
    };
    export function core_profiler_toggle(enable: any, settings: any): void;
}

